// <auto-generated />
using System;
using App.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230515191257_second")]
    partial class second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("App.ApplicationCore.Domain.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("MyCategories", (string)null);
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Client", b =>
                {
                    b.Property<string>("Cin")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cin");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Facture", b =>
                {
                    b.Property<string>("ClientFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAchat")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ClientFK", "ProductFK", "DateAchat");

                    b.HasIndex("ProductFK");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int?>("CategoryFK")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateProd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryFK");

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("ProductType").HasValue("Product");
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("ProductProvider", b =>
                {
                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProvidersProviderId")
                        .HasColumnType("int");

                    b.HasKey("ProductsProductId", "ProvidersProviderId");

                    b.HasIndex("ProvidersProviderId");

                    b.ToTable("MyProvidings", (string)null);
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Biological", b =>
                {
                    b.HasBaseType("App.ApplicationCore.Domain.Product");

                    b.Property<string>("Herbs")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Biological");
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Chemical", b =>
                {
                    b.HasBaseType("App.ApplicationCore.Domain.Product");

                    b.Property<string>("LabName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Chemical");
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Facture", b =>
                {
                    b.HasOne("App.ApplicationCore.Domain.Client", "Client")
                        .WithMany("Factures")
                        .HasForeignKey("ClientFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.ApplicationCore.Domain.Product", "Product")
                        .WithMany("Factures")
                        .HasForeignKey("ProductFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Product", b =>
                {
                    b.HasOne("App.ApplicationCore.Domain.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryFK");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Provider", b =>
                {
                    b.HasOne("App.ApplicationCore.Domain.Category", null)
                        .WithMany("Providers")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("ProductProvider", b =>
                {
                    b.HasOne("App.ApplicationCore.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.ApplicationCore.Domain.Provider", null)
                        .WithMany()
                        .HasForeignKey("ProvidersProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Chemical", b =>
                {
                    b.OwnsOne("App.ApplicationCore.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ChemicalProductId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("StreetAddress")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("ChemicalProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ChemicalProductId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Providers");
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Client", b =>
                {
                    b.Navigation("Factures");
                });

            modelBuilder.Entity("App.ApplicationCore.Domain.Product", b =>
                {
                    b.Navigation("Factures");
                });
#pragma warning restore 612, 618
        }
    }
}
